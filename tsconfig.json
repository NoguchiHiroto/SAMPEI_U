{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    /* このファイルの詳細については https://aka.ms/tsconfig を参照してください */
    "jsx": "react-jsx",
    "paths": {
      "@/*": [
        "./*"
      ]
    },
    /* プロジェクト */
    // "incremental": true,                              /* プロジェクトのインクリメンタルコンパイルを可能にするために.tsbuildinfoファイルを保存します。 */
    // "composite": true,                                /* TypeScriptプロジェクトがプロジェクト参照で使用できるように制約を有効にします。 */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* .tsbuildinfoインクリメンタルコンパイルファイルのパスを指定します。 */
    // "disableSourceOfProjectReferenceRedirect": true,  /* 複合プロジェクトを参照する際に、宣言ファイルの代わりにソースファイルを優先するのを無効にします。 */
    // "disableSolutionSearching": true,                 /* 編集中にプロジェクトをマルチプロジェクト参照チェックから除外します。 */
    // "disableReferencedProjectLoad": true,             /* TypeScriptによって自動的に読み込まれるプロジェクトの数を減らします。 */

    /* 言語と環境 */
    "target": "esnext",                                  /* 出力されるJavaScriptの言語バージョンを設定し、互換性のあるライブラリ宣言を含めます。 */
    // "lib": [],                                        /* ターゲットランタイム環境を記述する、バンドルされたライブラリ宣言ファイルのセットを指定します。 */
    // "jsx": "preserve",                                /* 生成されるJSXコードの種類を指定します。 */
    // "libReplacement": true,                           /* Enable lib replacement. */
    // "experimentalDecorators": true,                   /* レガシーな実験的デコレータの実験的サポートを有効にします。 */
    // "emitDecoratorMetadata": true,                    /* ソースファイル内のデコレートされた宣言に対して、デザイン時型メタデータを出力します。 */
    // "jsxFactory": "",                                 /* 'react' JSX emitをターゲットとする際に使用されるJSXファクトリ関数を指定します。例: 'React.createElement' や 'h' */
    // "jsxFragmentFactory": "",                         /* 'react' JSX emitをターゲットとする際にフラグメントに使用されるJSX Fragment参照を指定します。例: 'React.Fragment' や 'Fragment' */
    // "jsxImportSource": "",                            /* 'jsx: react-jsx*' を使用する際にJSXファクトリ関数をインポートするために使用されるモジュール指定子を指定します。 */
    // "reactNamespace": "",                             /* 'createElement' のために呼び出されるオブジェクトを指定します。これは 'react' JSX emitをターゲットとする場合にのみ適用されます。 */
    // "noLib": true,                                    /* デフォルトのlib.d.tsを含む、いかなるライブラリファイルもインクルードしないようにします。 */
    // "useDefineForClassFields": true,                  /* ECMAScript標準に準拠したクラスフィールドを出力します。 */
    // "moduleDetection": "auto",                        /* モジュール形式のJSファイルを検出するために使用されるメソッドを制御します。 */

    /* モジュール */
    "module": "esnext",                                /* 生成されるモジュールコードの種類を指定します。 */
    // "rootDir": "./",                                  /* ソースファイル内のルートフォルダを指定します。 */
    // "moduleResolution": "node10",                     /* TypeScriptが特定のモジュール指定子からファイルをどのように探すかを指定します。 */
    // "baseUrl": "./",                                  /* 非相対的なモジュール名を解決するためのベースディレクトリを指定します。 */
    // "paths": {},                                      /* インポートを追加の検索場所に再マッピングするエントリのセットを指定します。 */
    // "rootDirs": [],                                   /* モジュール解決時に、複数のフォルダを一つのフォルダとして扱うことを許可します。 */
    // "typeRoots": [],                                  /* './node_modules/@types' のように機能する複数のフォルダを指定します。 */
    // "types": [],                                      /* ソースファイルで参照されなくてもインクルードされる型パッケージ名を指定します。 */
    // "allowUmdGlobalAccess": true,                     /* モジュールからUMDグローバルへのアクセスを許可します。 */
    // "moduleSuffixes": [],                             /* モジュールを解決する際に検索するファイル名の接尾辞のリスト。 */
    // "allowImportingTsExtensions": true,               /* インポートにTypeScriptファイル拡張子を含めることを許可します。'--moduleResolution bundler' と '--noEmit' または '--emitDeclarationOnly' のいずれかの設定が必要です。 */
    // "rewriteRelativeImportExtensions": true,          /* Rewrite '.ts', '.tsx', '.mts', and '.cts' file extensions in relative import paths to their JavaScript equivalent in output files. */
    // "resolvePackageJsonExports": true,                /* パッケージのインポートを解決する際に package.json の 'exports' フィールドを使用します。 */
    // "resolvePackageJsonImports": true,                /* インポートを解決する際に package.json の 'imports' フィールドを使用します。 */
    // "customConditions": [],                           /* インポートを解決する際に、リゾルバ固有のデフォルトに加えて設定する条件。 */
    // "noUncheckedSideEffectImports": true,             /* Check side effect imports. */
    // "resolveJsonModule": true,                        /* .json ファイルのインポートを有効にします。 */
    // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
    // "noResolve": true,                                /* 'import'、'require'、'<reference>' がTypeScriptがプロジェクトに追加すべきファイルの数を増やすのを禁止します。 */

    /* JavaScriptサポート */
    // "allowJs": true,                                  /* JavaScriptファイルをプログラムの一部に含めることを許可します。これらのファイルからエラーを取得するには 'checkJS' オプションを使用します。 */
    // "checkJs": true,                                  /* 型チェックされたJavaScriptファイルでのエラー報告を有効にします。 */
    // "maxNodeModuleJsDepth": 1,                        /* 'node_modules' からのJavaScriptファイルをチェックするために使用される最大のフォルダ深度を指定します。'allowJs' でのみ適用可能です。 */

    /* 出力 */
    // "declaration": true,                              /* プロジェクト内のTypeScriptおよびJavaScriptファイルから .d.ts ファイルを生成します。 */
    // "declarationMap": true,                           /* d.ts ファイルのソースマップを作成します。 */
    // "emitDeclarationOnly": true,                      /* JavaScriptファイルではなく、d.ts ファイルのみを出力します。 */
    // "sourceMap": true,                                /* 出力されたJavaScriptファイル用のソースマップファイルを作成します。 */
    // "inlineSourceMap": true,                          /* 出力されたJavaScript内にソースマップファイルを含めます。 */
    // "noEmit": true,                                   /* コンパイルからのファイルの出力を無効にします。 */
    // "outFile": "./",                                  /* すべての出力を単一のJavaScriptファイルにバンドルするファイルを指定します。'declaration' が true の場合、すべての .d.ts 出力をバンドルするファイルも指定します。 */
    // "outDir": "./",                                   /* すべての出力ファイルの出力フォルダを指定します。 */
    // "removeComments": true,                           /* コメントの出力を無効にします。 */
    // "importHelpers": true,                            /* ヘルパー関数をファイルごとに含める代わりに、プロジェクトごとに一度 tslib からインポートすることを許可します。 */
    // "downlevelIteration": true,                       /* イテレーションのために、より準拠しているが冗長でパフォーマンスの低いJavaScriptを出力します。 */
    // "sourceRoot": "",                                 /* デバッガが参照ソースコードを見つけるためのルートパスを指定します。 */
    // "mapRoot": "",                                    /* デバッガが生成された場所の代わりにマップファイルを見つける場所を指定します。 */
    // "inlineSources": true,                            /* 出力されたJavaScript内のソースマップにソースコードを含めます。 */
    // "emitBOM": true,                                  /* 出力ファイルの先頭にUTF-8バイトオーダーマーク（BOM）を出力します。 */
    // "newLine": "crlf",                                /* ファイルを出力する際の改行文字を設定します。 */
    // "stripInternal": true,                            /* JSDocコメントに '@internal' がある宣言の出力を無効にします。 */
    // "noEmitHelpers": true,                            /* コンパイルされた出力で '__extends' のようなカスタムヘルパー関数の生成を無効にします。 */
    // "noEmitOnError": true,                            /* 型チェックエラーが報告された場合、ファイルの出力を無効にします。 */
    // "preserveConstEnums": true,                       /* 生成されたコードで 'const enum' 宣言の削除を無効にします。 */
    // "declarationDir": "./",                           /* 生成された宣言ファイルの出力ディレクトリを指定します。 */

    /* 相互運用性の制約 */
    // "isolatedModules": true,                          /* 各ファイルが他のインポートに依存せずに安全にトランスパイルできることを保証します。 */
    // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    // "isolatedDeclarations": true,                     /* Require sufficient annotation on exports so other tools can trivially generate declaration files. */
    // "erasableSyntaxOnly": true,                       /* Do not allow runtime constructs that are not part of ECMAScript. */
    // "allowSyntheticDefaultImports": true,             /* モジュールがデフォルトエクスポートを持たない場合に 'import x from y' を許可します。 */
    "esModuleInterop": true,                             /* CommonJSモジュールのインポートを容易にするための追加のJavaScriptを出力します。これにより、型互換性のために 'allowSyntheticDefaultImports' が有効になります。 */
    // "preserveSymlinks": true,                         /* シンボリックリンクを実際のパスに解決するのを無効にします。これはnodeの同じフラグに対応します。 */
    "forceConsistentCasingInFileNames": true,            /* インポートでファイル名の大文字小文字が正しいことを保証します。 */

    /* 型チェック */
    "strict": true,                                      /* すべての厳格な型チェックオプションを有効にします。 */
    // "noImplicitAny": true,                            /* 暗黙的な 'any' 型を持つ式や宣言に対してエラー報告を有効にします。 */
    // "strictBuiltinIteratorReturn": true,              /* Built-in iterators are instantiated with a 'TReturn' type of 'undefined' instead of 'any'. */
    // "strictNullChecks": true,                         /* 型チェック時に 'null' と 'undefined' を考慮に入れます。 */
    // "strictFunctionTypes": true,                      /* 関数を代入する際に、パラメータと戻り値がサブタイプ互換であることを確認します。 */
    // "strictBindCallApply": true,                      /* 'bind'、'call'、'apply' メソッドの引数が元の関数と一致することを確認します。 */
    // "strictPropertyInitialization": true,             /* コンストラクタで宣言されているが設定されていないクラスプロパティをチェックします。 */
    // "noImplicitThis": true,                           /* 'this' に 'any' 型が与えられた場合にエラー報告を有効にします。 */
    // "useUnknownInCatchVariables": true,               /* catch節の変数を 'any' の代わりに 'unknown' としてデフォルト設定します。 */
    // "alwaysStrict": true,                             /* 'use strict' が常に出力されることを保証します。 */
    // "noUnusedLocals": true,                           /* ローカル変数が読み取られない場合にエラー報告を有効にします。 */
    // "noUnusedParameters": true,                       /* 関数のパラメータが読み取られない場合にエラーを発生させます。 */
    // "exactOptionalPropertyTypes": true,               /* オプショナルプロパティ型を 'undefined' を追加するのではなく、書かれた通りに解釈します。 */
    // "noImplicitReturns": true,                        /* 関数内で明示的にリターンしないコードパスに対してエラー報告を有効にします。 */
    // "noFallthroughCasesInSwitch": true,               /* switch文のフォールスルーケースに対してエラー報告を有効にします。 */
    // "noUncheckedIndexedAccess": true,                 /* インデックスを使用してアクセスされた場合に型に 'undefined' を追加します。 */
    // "noImplicitOverride": true,                       /* 派生クラスでオーバーライドするメンバーに override 修飾子が付いていることを保証します。 */
    // "noPropertyAccessFromIndexSignature": true,       /* インデックス型を使用して宣言されたキーに対してインデックスアクセサの使用を強制します。 */
    // "allowUnusedLabels": true,                        /* 未使用のラベルに対するエラー報告を無効にします。 */
    // "allowUnreachableCode": true,                     /* 到達不能なコードに対するエラー報告を無効にします。 */

    /* 完全性 */
    // "skipDefaultLibCheck": true,                      /* TypeScriptに含まれる .d.ts ファイルの型チェックをスキップします。 */
    "skipLibCheck": true                                 /* すべての .d.ts ファイルの型チェックをスキップします。 */
  },
  "include": [
    "**/*.ts",
    "**/*.tsx",
    ".expo/types/**/*.ts",
    "expo-env.d.ts",
    "img.d.ts"
  ]
}